#!/bin/bash

BIN_PATH=$(dirname $(readlink -fn $0))
source $BIN_PATH/utils

MAKE_TARBALL=false
SP_SYNC=false
CLEAN=false
DEFAULT_ACTION="mvn install -Dmaven.test.skip" #don't run the unit tests
ACTION=$DEFAULT_ACTION
GIT_REPO_ROOT="/dev/null"

usage() {
  echo "Usage: jmake [-t -u -s -c]"
  echo "  -t: make a release tarball"
  echo "  -u: execute unit tests"
  echo "  -s: sp-sync the resulting tarball. requires -t"
  echo "  -c: clean. Ignores all other options"
  exit 0
}

#START
loadBuildEnvironment
setSmsv2Path

echo $PATH

while getopts "ctush" flag
do
  case $flag in
    s) SP_SYNC=true;;
    t) MAKE_TARBALL=true;;
    u) ACTION="mvn install"
      if [ $# -gt 1 ];then
        test="-Dtest=$2"
        ACTION="$ACTION $test"
      fi;;
    c) ACTION="mvn clean";;
    h) usage;;
    *) usage;;
  esac
done

rm $GIT_REPO_ROOT/$SMSV2_PATH/*.tgz

if [[ $MAKE_TARBALL == true || $SP_SYNC == true || $ACTION != $DEFAULT_ACTION ]]; then
  args=$1
  shift
fi

if [[ $MAKE_TARBALL == false ]]; then
  SP_SYNC=false
fi

if [[ $ACTION == "mvn clean" ]]; then
  MAKE_TARBALL=false
  SP_SYNC=false
fi

WD=`pwd`

if [[ $ACTION == $DEFAULT_ACTION && $# -ge 1 ]];then
  cd $1
  jmake $args
fi

if [ $? != 0  ]; then
  exit $?
fi

cd $WD

echo $ACTION
$ACTION

if [[ $? == 0 && $MAKE_TARBALL == true ]]; then

  if [ ! -e $repo_toplevel/$SMSV2_PATH/target/test-classes ]; then
    mkdir -p $repo_toplevel/$SMSV2_PATH/target/test-classes
  fi

  if [ basename != $SMSV2_PATH ]; then
    cd `git rev-parse --show-toplevel`
    cd $SMSV2_PATH
  fi
  echo "ant make-docless-tarball"
  ant make-docless-tarball
fi

if [ $? == 0 ]; then
  echo "Last build at `date`"
fi

  if [ $? == 0 -a $SP_SYNC == true ]; then
  sptool -c
  sptool -p smsv2-D*0*.tgz
fi


exit 0
