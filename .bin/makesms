#!/bin/bash

BIN_PATH=$(dirname $(readlink -fn $0))
source $BIN_PATH/utils

MVN="mvn -T2C"
TARGET_SRC_COMPILE="compiler:compile"
TARGET_TEST_COMPILE="compiler:testCompile"
TARGET_TEST_RUN="surefire:test"
TESTS_SKIP="-Dmaven.test.skip"
TARGET_BUILD="install"
TARGET_CLEAN="clean"
WITH_TESTS="-Dtest="
DEFAULT=$TARGET_BUILD
MAKE_DEV_IMAGE="ant make-dev-image"
MAKE_DEV_TARBALL="ant make-tar-file-from-release-image"
MAKE_TARBALL="ant make-release-tarball"
BUILD_PATH=`pwd`

DO_DEFAULT=true
DO_RELEASE_TARBALL=false
DO_DEV_IMAGE=false
DO_DEV_TARBALL=false
DO_BUILD=false
DO_COMPILE=false
DO_CLEAN=false
DO_TESTS=false
PRINT_ENV=false
TESTS=""

GIT_REPO_ROOT="/dev/null"

usage() {
  echo "Usage: makesms [-b -o -i -e -t -c -u [test-regex]]"
  echo "  -b build project (default if no arguments are specified, overrides -o)"
  echo "  -o compile project only (overrides default)"
  echo "  -i make a developer image (implies -b)"
  echo "  -t: make a release tarball (implies -b)"
  echo "  -u: execute specified unit test pattern, or all unit tests if no pattern was specified"
  echo "      requires either -b or (at least) -o"
  echo "  -c: clean before building (-c alone overrides default; can be combined with -o or -b)."
  echo "  -p: the path in which to build."
  echo "  -e: Print the build environment and exit."
  exit 0
}

#START
while getopts ":boiteu:chp:" arg; do
  case $arg in
    b) DO_BUILD=true
       DO_DEFAULT=false;;
    o) DO_COMPILE=true
       DO_DEFAULT=false;;
    i) DO_DEV_IMAGE=true
       DO_BUILD=true;;
    t) DO_RELEASE_TARBALL=true
       DO_BUILD=true;;
    c) DO_CLEAN=true
       DO_DEFAULT=false;;
    u) DO_TESTS=true
       TESTS=$OPTARG;;
    p) BUILD_PATH=$OPTARG;;
    e) PRINT_ENV=true;;
    :) DO_TESTS=true;; #this is an abuse of :)
    h) usage;;
    \?) usage;;
  esac
done

# saneitize (yes, not sanitize) args

# -b overrides -o
if [[ $DO_BUILD == true ]]; then
  DO_COMPILE=false
fi

# if -u is true, require at least -o
if [[ $DO_TESTS == true && $DO_BUILD == false && $DO_DEFAULT == false && $DO_COMPILE == false ]]; then
  DO_COMPILE=true
fi

# build the command
ACTION=$MVN

if [[ $DO_CLEAN == true ]]; then
  ACTION="$ACTION clean"
fi

# -b is the default
if [[ $DO_BUILD == true || $DO_DEFAULT == true ]]; then
  ACTION="$ACTION $TARGET_BUILD"
elif [[ $DO_COMPILE == true ]]; then
  ACTION="$ACTION $TARGET_SRC_COMPILE"
fi

# run unit tests
if [[ $DO_TESTS == false ]]; then
  if [[ $DO_BUILD == true || $DO_DEFAULT == true ]]; then
    ACTION="$ACTION $TESTS_SKIP"
  fi
else
  if [[ $DO_COMPILE == true ]]; then
    ACTION="$ACTION $TARGET_TEST_COMPILE $TARGET_TEST_RUN"
  fi
  if [[ $TESTS ]]; then
    ACTION="$ACTION -Dtest=$TESTS"
  fi
fi

findFirstBuildDir $BUILD_PATH
setSmsv2Path
loadBuildEnvironment

rm $GIT_REPO_ROOT/$SMSV2_PATH/*.tgz 2> /dev/null

TOOLS=`env | grep "JAVA\|ANT\|MVN\|MAVEN" | sort`
echo -e "\e[1;33mUsing build_environment:\n$TOOLS\e[0m"

if [[ $PRINT_ENV == true ]]; then exit 0; fi

execAction $ACTION

# build the tarball, but only if building succedeed
if [[ $? != 0  ]]; then
    exit $?
fi

if [[ $DO_DEV_IMAGE == true || $DO_RELEASE_TARBALL == true ]]; then
  if [ basename != $SMSV2_PATH ]; then
    cd $GIT_REPO_ROOT/$SMSV2_PATH
  fi

  if [ ! -e target/test-classes ]; then
    mkdir -p target/test-classes
  fi

  if [[ $DO_DEV_IMAGE == true ]]; then
      execAction $MAKE_DEV_IMAGE
  fi

  if [[ $DO_RELEASE_TARBALL == true ]]; then
      execAction $MAKE_TARBALL
  fi
fi

if [ $? == 0 ]; then
  echo -e "\e[1;33mLast build at `date`\e[0m"
fi

exit $?
